//! # Overview
//! 
//! wye_impl provides the proc-macros [wye] and [wyre] used by [wye](https://github.com/mstone/wye).
//! 
//! # Guide-level explanation
//! 
//! [wye] transforms the functions it is used to annotate to record dataflow 
//! from arguments to returned results.
//! 
//! [wyre] transforms the expressions -- typically call-sites -- that it spans
//! to record data-flow from variables to arguments of the functions being called.
//! 
//! # Reference-level explanation
//! 
//! ## Architecture
//! 
//! [wye] and [wyre] work by using [syn], [quote], and [proc_macro2] to 
//! parse, analyze, and transform their inputs, and [trybuild] for testing.
//! 
//! The main axis of the analysis is: statement-level expressions can be 
//! transformed into equivalent sequences of bindings of fresh variables 
//! to sub-terms and of applications of the constructor of the top-level 
//! term to these fresh variables.
//! 
//! Then, in between definition and use, these fresh variables and their 
//! corresponding dataflows to the result of the expression being 
//! transformed can be logged.
//! 
//! ## Key Items
//! 
//! * [wye::get_wye] provides access to a [&mut wye::Logger], which provides
//!   APIs for dataflow recording and shadow call-stack frame management for
//!   use in the code generated by the [wye] and [wyre] macros.
//! 
//! * [WyeArgs] and [WyeArgMap] are used by [wye] to support custom formatting.
//! 
//! * [process_stmts] is the root of the common logic shared by [wye] and [wyre].
//! 
//! ## Method
//! 
//! I need a way to take an expression, 
//! 
//! 1. I need to enumerate bound variables in the expression and to look up dataflow coordinates for their values.
//! 2. I need to generate and bind fresh variables for sub-expressions, and to record dataflow from the bound variables they contain to them.
//! 3. I need to generate and bind a fresh variable for the result of the expression, to record the result in the dataflow at suitable coordinates, and to record the dataflow from the sub-expressions to the result.
//! 4. I need to smuggle all these coordinates back and forth across stack frames at the appropriate moments.
//! 5. I need to coalesce or to simplify how I print the dataflow graph to minimize unhelpful duplication of detail.
//! 
//! # See Also
//! 
//! * [wye](https://github.com/mstone/wye)
#![feature(proc_macro_span)]
use std::{collections::{HashMap, HashSet, hash_map::DefaultHasher}, fmt::Display, hash::{Hash, Hasher}, ops::Range};

use proc_macro2::{TokenStream, Span};
use quote::{ToTokens, TokenStreamExt};
use rangemap::RangeMap;
use syn::{parse_macro_input, Item, Expr, punctuated::Punctuated, token::{Comma}, Block, Stmt, Ident, parenthesized, visit::Visit, visit_mut::VisitMut, spanned::Spanned, PatIdent, ItemFn, parse_quote, BinOp,};

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct LineColumn {
    line: usize,
    column: usize,
}

impl From<proc_macro::LineColumn> for LineColumn {
    fn from(lc: proc_macro::LineColumn) -> Self {
        Self {
            line: lc.line,
            column: lc.column,
        }
    }
}

impl From<proc_macro2::LineColumn> for LineColumn {
    fn from(lc: proc_macro2::LineColumn) -> Self {
        Self {
            line: lc.line,
            column: lc.column,
        }
    }
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct Bytespan {
    source_hash: u64,
    start: LineColumn,
    end: LineColumn,
}

impl Bytespan {
    fn new(source_hash: u64, span: Span) -> Self {
        Self {
            source_hash, 
            start: span.start().into(), 
            end: span.end().into(),
        }
    }

    fn new_from_range(source_hash: u64, range: &Range<proc_macro::LineColumn>) -> Self {
        Self {
            source_hash,
            start: range.start.into(),
            end: range.end.into(),
        }
    }
}

struct Place {}

impl Display for Place {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Place")
    }
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct Source {
    ident: String
}

impl Display for Source {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Source{{{}}}", self.ident)
    }
}

impl<'ast> From<&'ast Ident> for Source {
    fn from(ident: &'ast Ident) -> Self {
        Self {
            ident: ident.span().unwrap().source_text().unwrap(),
        }
    }
}

#[derive(Clone, Debug, Eq, PartialEq)]
struct Sources(HashSet<Source>);

impl Sources {
    fn new() -> Self {
        Self(HashSet::new())
    }

    fn insert(&mut self, source: Source) {
        self.0.insert(source);
    }
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct Use {
    ident: String
}

impl From<&Ident> for Use {
    fn from(ident: &Ident) -> Self {
        Self{ident: ident.to_string()}
    }
}

#[derive(Clone, Debug, Eq, PartialEq)]
struct Uses{
    source_hash: u64,
    uses: RangeMap<proc_macro::LineColumn, Use>,
}

impl Uses {
    fn new(source_hash: u64) -> Self {
        Self {
            source_hash,
            uses: RangeMap::new(),
        }
    }

    
}

impl<'ast> Visit<'ast> for Uses {
    fn visit_ident(&mut self, ident: &'ast Ident) {
        let ident_start = ident.span().unwrap().start();
        let ident_end = ident.span().unwrap().end();
        let ident_range = ident_start..ident_end;
        self.uses.insert(ident_range, Use::from(ident));
    }
}

#[derive(Clone, Debug)]
struct Scopes {
    #[allow(dead_code)]
    source_hash: u64,
    scopestack: Vec<(proc_macro::LineColumn, Sources)>,
    scopes: RangeMap<proc_macro::LineColumn, Sources>,
}

impl Scopes {
    fn new(source_hash: u64) -> Self {
        Self{
            source_hash,
            scopestack: vec![],
            scopes: RangeMap::new(),
        }
    }

    fn push_scope(&mut self, start: proc_macro::LineColumn) {
        self.scopestack.push((start, Sources::new()));
    }

    fn pop_scope(&mut self, end: proc_macro::LineColumn) {
        if let Some((start, scope)) = self.scopestack.pop() {
            self.scopes.insert(start..end, scope);
        }
    }
}

impl<'ast> Visit<'ast> for Scopes {
    fn visit_item_fn(&mut self, item_fn: &'ast ItemFn) {
        self.push_scope(item_fn.span().unwrap().start());
        syn::visit::visit_item_fn(self, item_fn);
        self.pop_scope(item_fn.span().unwrap().end());
    }

    fn visit_block(&mut self, block: &'ast Block) {
        self.push_scope(block.span().unwrap().start());
        syn::visit::visit_block(self, block);
        self.pop_scope(block.span().unwrap().end());
    }

    fn visit_pat_ident(&mut self, ident: &'ast PatIdent) {
        self.scopestack
            .last_mut()
            .map(|ref mut scope| {
                scope.1.insert(Source::from(&ident.ident))
            });
    }
}

struct Parts<'ast> {
    source_hash: u64,
    scopes: &'ast Scopes,
    uses: &'ast Uses,
}

impl<'ast> Parts<'ast> {
    fn new(source_hash: u64, scopes: &'ast Scopes, uses: &'ast Uses) -> Self {
        Self{
            source_hash,
            scopes,
            uses,
        }
    }
}

impl<'ast> VisitMut for Parts<'ast> {
    fn visit_expr_mut(&mut self, expr: &mut Expr) {
        let expr_start = expr.span().unwrap().start();
        let expr_end = expr.span().unwrap().end();
        let expr_range = expr_start..expr_end;
        let scopes = self.scopes.scopes.overlapping(&expr_range);
        let scopes = scopes.collect::<Vec<_>>();
        let uses = self.uses.uses.overlapping(&expr_range);
        let uses = uses.collect::<Vec<_>>();
        let mut bindings: Vec<(_, Use, _, Sources)> = vec![];

        for (var_range, var) in uses.iter().cloned() {
            for (scope_range, scope) in scopes.iter().cloned().rev() {
                if scope_range.contains(&var_range.start) && scope_range.contains(&var_range.end) {
                    bindings.push((var_range, var.clone(), scope_range, scope.clone()));
                    break;
                }
            }
        }

        // eprintln!("EXPR: {}", expr.to_token_stream().to_string());
        // eprintln!("SCOPES: {:#?}", scopes);
        // eprintln!("USES: {:#?}", uses);
        // eprintln!("BINDINGS: {:#?}", bindings);
        // eprintln!("");

        let place = hash(Bytespan::new(self.source_hash, expr.span().unwrap().into()));

        syn::visit_mut::visit_expr_mut(self, expr);

        let mvar: Expr = if let Some(ident) = as_ident(expr) {
            let ident = ident.to_string();
            parse_quote!(Some(#ident.into()))
        } else if let Some(binop) = as_binop(expr) {
            let binop = binop.to_token_stream().to_string();
            parse_quote!(Some(#binop.into()))
        } else {
            parse_quote!(None::<String>)
        };

        let edges: Vec<Stmt> = if as_ident(expr).is_some() {
            vec![]
        } else {
            bindings.iter().map(|(var_range, var, scope_range, scope)| {
                let var_place = hash(Bytespan::new_from_range(self.source_hash, var_range));
                parse_quote!(__wye.edge(__wye_frame, #var_place, __wye_frame, #place);)
            }).collect::<Vec<_>>()
        };

        *expr = parse_quote!(({
            let __wye = get_wye();
            let (__wye_frame, _) = __wye.frame();
            let __wye_ret = #expr; 
            __wye.node(__wye_frame, #place, #mvar, (&__wye_ret).to_string());
            #(#edges)*;
            __wye_ret
        }));

        // let place = scopes.place(expr.span());
        // let sources = scopes.sources(expr.span());
        // let uses = scopes.uses(expr.span());
        // eprintln!("SCOPES: {scopes:?}");
    }
}

fn as_ident(expr: &Expr) -> Option<&Ident> {
    if let Expr::Path(expr_path) = expr {
        return expr_path.path.get_ident()
    }
    None
}

fn as_binop(expr: &Expr) -> Option<&BinOp> {
    if let Expr::Binary(expr_binary) = expr {
        return Some(&expr_binary.op)
    }
    None
}

fn hash<T: Hash>(t: T) -> u64 {
    let mut h = DefaultHasher::new();
    t.hash(&mut h);
    h.finish()
}

#[derive(Debug)]
struct FormatArgs(Punctuated<Expr, Comma>);

impl syn::parse::Parse for FormatArgs {
    fn parse(input: syn::parse::ParseStream) -> syn::Result<Self> {
        let mut format_args: Punctuated<Expr, Comma> = Punctuated::new();
        loop {
            format_args.push_value(input.parse()?);
            if input.is_empty() {
                break;
            }
            format_args.push_punct(input.parse()?);
        }
        Ok(FormatArgs(format_args))
    }
}

impl quote::ToTokens for FormatArgs {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        tokens.append_separated(&self.0, Comma::default());
    }
}

struct Stmts(Vec<Stmt>);

impl syn::parse::Parse for Stmts {
    fn parse(input: syn::parse::ParseStream) -> syn::Result<Self> {
        Block::parse_within(input).map(Stmts)
    }
}

impl quote::ToTokens for Stmts {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        let brace_token = syn::token::Brace::default();
        brace_token.surround(tokens, |tokens| {
            tokens.append_all(&self.0);
        });
    }
}

struct WyeArg{
    ident: syn::Ident,
    colon_token: syn::Token![:],
    expr: syn::Expr,
}

impl syn::parse::Parse for WyeArg {
    fn parse(input: syn::parse::ParseStream) -> syn::Result<Self> {
        Ok(Self{
            ident: input.parse()?,
            colon_token: input.parse()?,
            expr: input.parse()?,
        })
    }
}

impl quote::ToTokens for WyeArg {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        self.ident.to_tokens(tokens);
        self.colon_token.to_tokens(tokens);
        self.expr.to_tokens(tokens);
    }
}

struct WyeArgs(Punctuated<WyeArg, Comma>);

impl syn::parse::Parse for WyeArgs {
    fn parse(input: syn::parse::ParseStream) -> syn::Result<Self> {
        let mut args = Punctuated::new();
        loop {
            if input.is_empty() {
                break;
            }
            args.push(input.parse()?);
            if input.is_empty() {
                break;
            }
            let comma: Comma = input.parse()?;
            args.push_punct(comma);
        }
        Ok(Self(args))
    }
}

impl quote::ToTokens for WyeArgs {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        tokens.append_separated(self.0.iter(), Comma::default())
    }
}

type WyeArgMap = HashMap<Ident, Expr>;

impl WyeArgs {
    fn process(&self) -> WyeArgMap {
        let mut args = HashMap::new();
        for arg in self.0.iter() {
            args.insert(arg.ident.clone(), arg.expr.clone());
        }
        args
    }
}

struct WyreExpr {
    args: Option<(syn::token::Paren, WyeArgs)>,
    stmts: Stmts,
}

impl syn::parse::Parse for WyreExpr {
    fn parse(input: syn::parse::ParseStream) -> syn::Result<Self> {
        if input.peek(syn::token::Paren) {
            let content;
            Ok(Self {
                args: Some((parenthesized!(content in input), content.parse()?)),
                stmts: input.parse()?,
            })
        } else {
            Ok(Self {
                args: None,
                stmts: input.parse()?
            })
        }
    }
}

impl quote::ToTokens for WyreExpr {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        // Note: self.args intentionally does *not* get re-printed
        // since it would not be valid syntax.
        // if let Some((paren_token, args)) = self.args {
        //     paren_token.surround(tokens, |tokens| {
        //         args.to_tokens(tokens);
        //     })
        // }
        self.stmts.to_tokens(tokens);
    }
}

#[proc_macro_attribute]
pub fn wye(args: proc_macro::TokenStream, input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    let args = if !args.is_empty() {
        parse_macro_input!(args as WyeArgs).process()
    } else {
        WyeArgMap::new()
    };
    let _ = args;
    
    let mut input = parse_macro_input!(input as Item);
    
    let source_hash = hash(proc_macro::Span::call_site().source_text().unwrap()); 

    let mut scopes = Scopes::new(source_hash);
    scopes.visit_item(&input);

    let mut uses = Uses::new(source_hash);
    uses.visit_item(&input);

    let mut parts = Parts::new(source_hash, &scopes, &uses);
    parts.visit_item_mut(&mut input);
    
    let tokens = input.into_token_stream();
    tokens.into()
}

#[proc_macro]
pub fn wyre(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    let mut input = parse_macro_input!(input as WyreExpr);
    
    let args = input.args.as_ref().map(|args| args.1.process()).unwrap_or_else(WyeArgMap::new);
    let _ = args;

    let source_hash = hash(proc_macro::Span::call_site().source_text().unwrap());
    
    let mut scopes = Scopes::new(source_hash);
    for stmt in &input.stmts.0 {
        scopes.visit_stmt(stmt)
    }

    let mut uses = Uses::new(source_hash);
    for stmt in &input.stmts.0 {
        uses.visit_stmt(stmt)
    }

    let mut parts = Parts::new(source_hash, &scopes, &uses);
    for stmt in &mut input.stmts.0 {
        parts.visit_stmt_mut(stmt);
    }

    let tokens = input.into_token_stream();
    tokens.into()
}